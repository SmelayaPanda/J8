package smel.pan.pack5_map;import java.util.HashMap;import java.util.Map;/** * Created by SmelayaPanda on 21.04.2016. * * @Map Maps don't support streams. * Instead maps now support various new and useful methods for doing common tasks. * @forEach accepts a consumer to perform operations for each value of the map. * @putIfAbsent prevents us from writing additional if null checks */public class MapTest {    public static void main(String[] args) {        Map<Integer, String> map = new HashMap<>();        for (int i = 0; i < 10; i++) {            map.putIfAbsent(i, "val_" + i);        }        map.forEach((id, val) -> System.out.println(val));        /*Test of other methods:         * @computeIfAbsent         * @computeIfPresent         * @remove         * @merge         * */        map.computeIfPresent(3, (num, val) -> val + num);        System.out.println(map.get(3)); //val_33        map.computeIfPresent(5, ((num, val) -> null));        System.out.println(map.containsKey(5)); //false        map.computeIfAbsent(7, (num -> null));        System.out.println(map.containsKey(7)); //true        map.computeIfPresent(9, (num, val) -> "boom");        System.out.println(map.containsKey(9)); //true        System.out.println(map.get(9)); //boom        System.out.println(map.get(2)); //val_2        map.remove(2, "val_749");        System.out.println(map.get(2)); //val_2        map.remove(2, "val_2");        System.out.println(map.get(2)); //null        map.merge(4, "_dop", (value, newValue) -> value.concat(newValue));        System.out.println(map.get(4)); //val_4_dop    }}