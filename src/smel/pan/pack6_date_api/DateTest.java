package smel.pan.pack6_date_api;import java.time.*;import java.time.format.DateTimeFormatter;import java.time.format.FormatStyle;import java.time.temporal.ChronoField;import java.time.temporal.ChronoUnit;import java.util.Locale;/** * Created by SmelayaPanda on 21.04.2016. * * @Clock Clock provides access to the current date and time. * Clocks are aware of a timezone and may be used instead of System.currentTimeMillis() * to retrieve the current milliseconds. * Such an instantaneous point on the time-line is also represented by the class Instant. * Instants can be used to create legacy java.util.Date objects. */public class DateTest {    public static void main(String[] args) {        Clock clock = Clock.systemDefaultZone();        System.out.println(clock);  //SystemClock[Asia/Novosibirsk]        long millis = clock.millis();        System.out.println(millis); //1461243704847        Instant instant = clock.instant();        System.out.println(instant); //2016-04-21T13:02:50.927Z        /**         * @Timezones are represented by a ZoneId         * Timezones define the offsets which are important to convert between instants and local dates and times.         */        System.out.println(ZoneId.getAvailableZoneIds());        //[Asia/Aden, America/Cuiaba, Etc/GMT+9, Etc/GMT+8, Africa/Nairobi...print all timezone        ZoneId zone1 = ZoneId.of("Europe/Berlin");        ZoneId zone2 = ZoneId.of("Brazil/East");        System.out.println(zone1.getRules());//ZoneRules[currentStandardOffset=+01:00]        System.out.println(zone2.getRules());//ZoneRules[currentStandardOffset=-03:00]        /**         * @LocalTime represents a time without a timezone         * */        LocalTime now1 = LocalTime.now(zone1);        LocalTime now2 = LocalTime.now(zone2);        System.out.println(now1); //15:17:33.433        System.out.println(now2); //10:17:33.435        System.out.println(now1.isBefore(now2));//without this string low expression unavailable        long hoursBeetween = ChronoUnit.HOURS.between(now1, now2);        long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);        System.out.println(hoursBeetween); // - 4        System.out.println(minutesBetween); // - 299        /**         * LocalTime comes with various factory method         * to simplify the creation of new instances, including parsing of time strings.         * */        LocalTime late = LocalTime.of(23, 59, 59);        System.out.println(late);       // 23:59:59        DateTimeFormatter formatter =                DateTimeFormatter                        .ofLocalizedTime(FormatStyle.SHORT)                        .withLocale(Locale.GERMAN);        LocalTime leetTime = LocalTime.parse("10:45", formatter);        System.out.println(leetTime); // 10:45        /**         * @LocalDate represents a distinct date, e.g. 2016-04-21         * It's immutable and works exactly analog to LocalTime.         * Keep in mind that each manipulation returns a new instance.         */        LocalDate today = LocalDate.now();        System.out.println(today); //2016-04-21        LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);        LocalDate yesterday = tomorrow.minusDays(2);        LocalDate independenceDay = LocalDate.of(2016, Month.SEPTEMBER, 8);        DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();        System.out.println("My birthday this year will be on: " + dayOfWeek); //THURSDAY        /**         * Parsing a LocalDate from a string is just as simple as parsing a LocalTime         * */        DateTimeFormatter formatter2 = DateTimeFormatter                .ofLocalizedDate(FormatStyle.MEDIUM)                .withLocale(Locale.GERMAN);        LocalDate bday = LocalDate.parse("08.09.2016", formatter2);        System.out.println(bday); //2016-09-08        /**         * @LocalDateTime represents a date-time.         * It combines date and time as seen in the above sections into one instance.         * LocalDateTime is immutable and works similar to LocalTime and LocalDate.         * */        LocalDateTime sylvester = LocalDateTime.of(2016, Month.APRIL, 30, 23, 59, 59);        dayOfWeek = sylvester.getDayOfWeek();        System.out.println(dayOfWeek);      // SATURDAY        Month month = sylvester.getMonth();        System.out.println(month);          // APRIL        long minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);        System.out.println(minuteOfDay); //1439        /**         * Formatting date-times works just like formatting dates or times.         * Instead of using pre-defined formats we can create formatters from custom patterns.         * */        DateTimeFormatter formatter3 =                DateTimeFormatter                        .ofPattern("MMM dd, yyyy - HH:mm");        LocalDateTime parsed3 = LocalDateTime.parse("Sep 03, 2014 - 07:13", formatter3);        String string = formatter3.format(parsed3);        System.out.println(string);    }}